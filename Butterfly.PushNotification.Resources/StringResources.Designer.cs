//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.276
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Butterfly.PushNotification.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class StringResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal StringResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Butterfly.PushNotification.Resources.StringResources", typeof(StringResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0001_Push Notification Message object cannot be null or empty..
        /// </summary>
        public static string Code_0001 {
            get {
                return ResourceManager.GetString("Code_0001", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0002_Invalid Push Notification Type. The valid &amp; supported values are Toast, Tile &amp; Raw..
        /// </summary>
        public static string Code_0002 {
            get {
                return ResourceManager.GetString("Code_0002", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0003_The encoded Param value must be 256 characters or less..
        /// </summary>
        public static string Code_0003 {
            get {
                return ResourceManager.GetString("Code_0003", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0004_The Param value is not supported by the Windows Phone 7.0 Device. It is only supported for Windows Phone 7.1 and above. The provided value will be ignored..
        /// </summary>
        public static string Code_0004 {
            get {
                return ResourceManager.GetString("Code_0004", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0005_The BackBackgroundImageUri value is not supported by the Windows Phone 7.0 Device. It is only supported for Windows Phone 7.1 and above. The provided value will be ignored..
        /// </summary>
        public static string Code_0005 {
            get {
                return ResourceManager.GetString("Code_0005", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0006_The BackTitle value is not supported by the Windows Phone 7.0 Device. It is only supported for Windows Phone 7.1 and above. The provided value will be ignored..
        /// </summary>
        public static string Code_0006 {
            get {
                return ResourceManager.GetString("Code_0006", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0007_The BackContent value is not supported by the Windows Phone 7.0 Device. It is only supported for Windows Phone 7.1 and above. The provided value will be ignored..
        /// </summary>
        public static string Code_0007 {
            get {
                return ResourceManager.GetString("Code_0007", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0008_The maximum allowed tile count is 99. A greater value will be automatically truncated to 99 by the MPNS. No error will be thrown. If you want a greater value, try using the Back Tile properties with a string..
        /// </summary>
        public static string Code_0008 {
            get {
                return ResourceManager.GetString("Code_0008", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0009_You have requested secure notifications but no certificate was found. Please provide a X509 Certificate in the authentication settings..
        /// </summary>
        public static string Code_0009 {
            get {
                return ResourceManager.GetString("Code_0009", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0010_The Notification Uri cannot be null or empty. Please provide a valid channel Uri..
        /// </summary>
        public static string Code_0010 {
            get {
                return ResourceManager.GetString("Code_0010", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0011_Invalid Message Priority. The valid &amp; supported values are Realtime, Priority &amp; Regular..
        /// </summary>
        public static string Code_0011 {
            get {
                return ResourceManager.GetString("Code_0011", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0012_Windows Phone Callback Registration Request object cannot be null or empty..
        /// </summary>
        public static string Code_0012 {
            get {
                return ResourceManager.GetString("Code_0012", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0013_The Callback Uri cannot be null or empty. Please provide a valid callback Uri..
        /// </summary>
        public static string Code_0013 {
            get {
                return ResourceManager.GetString("Code_0013", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0014_The Callback Message cannot be null. Please provide a valid payload..
        /// </summary>
        public static string Code_0014 {
            get {
                return ResourceManager.GetString("Code_0014", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0015_The Callback Message size cannot exceed 1 KB. Please provide a payload with valid size..
        /// </summary>
        public static string Code_0015 {
            get {
                return ResourceManager.GetString("Code_0015", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Queue overflow. The web service should re-send the notification later. A best practice is to use an exponential backoff algorithm in minute increments..
        /// </summary>
        public static string ResponseComments_200_QueueFull_Connected_Active {
            get {
                return ResourceManager.GetString("ResponseComments_200_QueueFull_Connected_Active", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Queue overflow. The web service should re-send the notification later. A best practice is to use an exponential backoff algorithm in minute increments..
        /// </summary>
        public static string ResponseComments_200_QueueFull_TempDisconnected_Active {
            get {
                return ResourceManager.GetString("ResponseComments_200_QueueFull_TempDisconnected_Active", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The notification request was accepted and queued for delivery. This status does not mean the device has received the notification. It indicates only that the server has received the notification and queued it for delivery at the next possible opportunity for the device. The server could respond with this status even though the device is currently transitioning into an unreachable state. This means the notification would not be delivered until the device returns from the unreachable state..
        /// </summary>
        public static string ResponseComments_200_Received_Connected_Active {
            get {
                return ResourceManager.GetString("ResponseComments_200_Received_Connected_Active", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The notification request was accepted and queued for delivery. However, the device is temporarily disconnected. This response code can occur for a variety of reasons, including but not limited to: 
        ///    To reduce network load and latency, mobile operator network configurations can vary greatly in the amount of time a persistent data connection is allowed to live. The Push Notification Client attempts to mitigate these persistent data connection limitations, but there is a lower bound after which it is power [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ResponseComments_200_Received_TempDisconnected_Active {
            get {
                return ResourceManager.GetString("ResponseComments_200_Received_TempDisconnected_Active", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The push notification was received and dropped by the Push Notification Service. The Suppressed status can occur if the notification channel was configured to suppress push notifications for a particular push notification class..
        /// </summary>
        public static string ResponseComments_200_Suppressed_Connected_Active {
            get {
                return ResourceManager.GetString("ResponseComments_200_Suppressed_Connected_Active", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The push notification was received and dropped by the Push Notification Service. The Suppressed status can occur if the notification channel was configured to suppress push notifications for a particular push notification class..
        /// </summary>
        public static string ResponseComments_200_Suppressed_TempDisconnected_Active {
            get {
                return ResourceManager.GetString("ResponseComments_200_Suppressed_TempDisconnected_Active", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This error occurs when the web service sends a notification request with a bad XML document or malformed notification URI..
        /// </summary>
        public static string ResponseComments_400_NotApplicable_NotApplicable_NotApplicable {
            get {
                return ResourceManager.GetString("ResponseComments_400_NotApplicable_NotApplicable_NotApplicable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sending this notification is unauthorized. This error can occur for one of the following reasons:
        ///There is a mismatch between the subject name of the certificate on the web service and the subject name of the certificate on the Push Notification Service.
        ///If the token has been modified.
        ///If the token is not valid for its subscription..
        /// </summary>
        public static string ResponseComments_401_NotApplicable_NotApplicable_NotApplicable {
            get {
                return ResourceManager.GetString("ResponseComments_401_NotApplicable_NotApplicable_NotApplicable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The subscription is invalid and is not present on the Push Notification Service. The web service should stop sending new notifications to this subscription, and drop the subscription state for its corresponding application session..
        /// </summary>
        public static string ResponseComments_404_Dropped_Connected_Expired {
            get {
                return ResourceManager.GetString("ResponseComments_404_Dropped_Connected_Expired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The subscription is invalid and is not present on the Push Notification Service. The web service should stop sending new notifications to this subscription, and drop the subscription state for its client..
        /// </summary>
        public static string ResponseComments_404_Dropped_Disconnected_Expired {
            get {
                return ResourceManager.GetString("ResponseComments_404_Dropped_Disconnected_Expired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The subscription is invalid and is not present on the Push Notification Service. The web service should stop sending new notifications to this subscription, and drop the subscription state for its client..
        /// </summary>
        public static string ResponseComments_404_Dropped_TempDisconnected_Expired {
            get {
                return ResourceManager.GetString("ResponseComments_404_Dropped_TempDisconnected_Expired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid method (PUT, DELETE, CREATE). Only POST is allowed when sending a notification request..
        /// </summary>
        public static string ResponseComments_405_NotApplicable_NotApplicable_NotApplicable {
            get {
                return ResourceManager.GetString("ResponseComments_405_NotApplicable_NotApplicable_NotApplicable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This error occurs when an unauthenticated web service has reached the per-day throttling limit for a subscription. The web service can try to re-send the push notification every hour after receiving this error. The web service may need to wait up to 24 hours before normal notification flow will resume..
        /// </summary>
        public static string ResponseComments_406_Dropped_Connected_Active {
            get {
                return ResourceManager.GetString("ResponseComments_406_Dropped_Connected_Active", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This error occurs when an unauthenticated web service has reached the per-day throttling limit for a subscription. The web service can try to re-send the push notification every hour after receiving this error. The web service may need to wait up to 24 hours before normal notification flow will resume..
        /// </summary>
        public static string ResponseComments_406_Dropped_TempDisconnected_Active {
            get {
                return ResourceManager.GetString("ResponseComments_406_Dropped_TempDisconnected_Active", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device is in an inactive state. The web service may re-attempt sending the request one time per hour at maximum after receiving this error. If the web service violates the maximum of one re-attempt per hour, the Push Notification Service will de-register or permanently block the web service..
        /// </summary>
        public static string ResponseComments_412_Dropped_Inactive_NotApplicable {
            get {
                return ResourceManager.GetString("ResponseComments_412_Dropped_Inactive_NotApplicable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Push Notification Service is unable to process the request. The web service should re-send the notification later. A best practice is to use an exponential backoff algorithm in minute increments..
        /// </summary>
        public static string ResponseComments_503_NotApplicable_NotApplicable_NotApplicable {
            get {
                return ResourceManager.GetString("ResponseComments_503_NotApplicable_NotApplicable_NotApplicable", resourceCulture);
            }
        }
    }
}
